buildscript {
    ext {
        junitVersion = "4.13.2"
        groovyVersion = "3.0.9"
        lombokVersion = "1.18.22"
        jaksonVersion = "2.13.1"
        springDocVersion = "1.6.5"
        spockVersion = "2.0-groovy-3.0"
        guavaVersion = "31.0.1-jre"
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
    id 'application'
    id 'checkstyle'
    id 'jacoco'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

group = 'pl.futurecollars.invoicing'
version = '0.0.1'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "com.fasterxml.jackson.core:jackson-databind:${jaksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jaksonVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
    testImplementation "junit:junit:${junitVersion}"
}

application {
    mainClass = 'pl.futurecollars.invoicing.App'
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.85
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'pl/futurecollars/invoicing/App.class')
        }))
    }
}
